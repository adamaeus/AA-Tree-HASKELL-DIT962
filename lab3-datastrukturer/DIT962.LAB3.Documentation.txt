/-----------------------------------------------------------------------------\
|	Course:	DIT962									
|	Project:	Lab 3: AA Trees in Haskell			
|	Authors:	Niklas Andersson, Felix Nyiri Magnusson, Adam MostrÃ¶m     
|	Group:	8									
\-----------------------------------------------------------------------------/



   ::: Follows is documentation for the complete set of functions in the code. :::   



_________________________________________________________________________________

				     ::::::MODULE AATREE::::::
_________________________________________________________________________________

module AATree (
  AATree,        -- type of AA search trees
  emptyTree,     -- AATree a
  get,           -- Ord a => a -> AATree a -> Maybe a
  insert,        -- Ord a => a -> AATree a -> AATree a
  inorder,       -- AATree a -> [a]
  remove,        -- Ord a => a -> AATree a -> AATree a
  size,          -- AATree a -> Int
  bstHeight,        -- AATree a -> Int
  checkTree      -- Ord a => AATree a -> Bool
 ) where

import qualified Data.Tree as T


___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___ 

FUNCTION:

get :: Ord a => a -> AATree a -> Maybe a
get _ Empty = Nothing
get value (Node _ leftChild nodeValue rightChild)
  | value == nodeValue = Just nodeValue
  | value < nodeValue  = get value leftChild
  | otherwise          = get value rightChild


COMPLEXITY:

value == nodeValue = Just nodevalue:

gives a complexity O(1), the first node is the node we want to extract.

value < nodeValue  = get value leftChild:

gives a complexity of O (log n). We find that the node we want to extract is smaller than the current node (and/or root node), we therefore search the left subtree, reducing the search span by the complete right half. Therefore -> O(log n).

Same goes for the cases where the value is larger than the current node / root. 

Complexity = O(1) + O(log n) + O(log n) = *ignore smallest* -> 2(O(log n)) = *ignore constant* -> O(log n)

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___ 

FUNCTION:

split :: AATree a -> AATree a
split (Node xlvl a x (Node ylvl b y (Node zlvl c z d)))
  | ylvl == xlvl && xlvl == zlvl = Node (ylvl+1) (Node xlvl a x b) y (Node zlvl c z d)
    split tree 			   = tree


COMPLEXITY:

Complexity = O(1), it only depends on if the level for the different nodes are equal or not, no iteration needed. Just easy compare. The split is just rewriting the relation between the nodes, also O(1).



___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___ 

FUNCTION:

skew :: AATree a -> AATree a
skew (Node ylvl (Node xlvl a x b) y c)
  | ylvl == xlvl = Node xlvl a x (Node ylvl b y c)
skew tree 	     = tree


COMPLEXITY:

Same as above. Complexity = O(1). All it does is a simple comparison, no iterations.


___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___ 

FUNCTION:

insert :: Ord a => a -> AATree a -> AATree a
insert value tree = case get value tree of 
  Just _  -> tree                          
  Nothing -> insertLeaf value tree         
    where
      insertLeaf val Empty = Node 1 Empty val Empty  
      insertLeaf val (Node lvl left nodeValue right)
        | val < nodeValue = split (skew (Node lvl (insertLeaf val left) nodeValue right))
        | otherwise = split $ skew $ Node lvl left nodeValue (insertLeaf val right)


COMPLEXITY:

For inserting a value into a Tree that is "empty" the complexity would be O(1). Otherwise we insert a value into a tree with elements, and would therefore compare with the current node value, if smaller, its placed into the left of the tree, afterwhich it get skewed and then split, if it is bigger, its places on the right. The comparison with the headnode/current node / root is O(1).

The average case scenario would occur for a balanced tree, where the function would call on a subtree of the original one, halving the amount of nodes to compare with, effectivly giving the complexity O(log n), times the split and skew, which are also both O(1) for balanced trees:

O(log n) + O(1) + O(1) = O(log n) + 2(O(1)) = O(log n)

Thanks to the method following the invariant (self correcting with the split and skew functions) the "worst case" will never be a skewed tree.


___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___ 

FUNCTION:

inorder :: AATree a -> [a]
inorder Empty = []
inorder (Node _ l root r) = inorder l ++ [root] ++ inorder r


COMPLEXITY:

Since we have to iterate over the whole tree (list), the complexity depends on the size of the tree "O(n)".

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___ 

FUNCTION:

size :: AATree a -> Int
size Empty = 0
size (Node _ Empty _ Empty) = 1
size (Node _ l _ r) = size l + size r + 1

COMPLEXITY:

The function needs to visit every node in the tree to "count", therefore complexity will be O(n).

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___


FUNCTION:

height :: AATree a -> Int
height Empty = 0
height (Node lvl _ _ _) = lvl

COMPLEXITY:

Returns the current level. Not dependent on size of tree. Complexity = O(1)

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___

FUNCTION:

bstHeight :: AATree a -> Int
bstHeight Empty = 0
bstHeight (Node _ l _ r) = 1 + max (bstHeight l) (bstHeight r)


COMPLEXITY:

Complexity for "max" = O(1), all "max" does is to compare 2 values. 
Complexity for bstheight is 2 (O(log n)), because we do it two times for both sublists, but removing constant factors gives us -> O(log n)


___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___

FUNCTION:

checkTree :: Ord a => AATree a -> Bool
checkTree root =
  isSorted (inorder root) &&
  all checkLevels (nodes root)
  where
    nodes x
      | isEmpty x = []
      | otherwise = x:nodes (leftSub x) ++ nodes (rightSub x)


COMPLEXITY:

isSorted has a complexity (O(n)), this function itself calls for function inOrder which has (O(1)).
Checklevels has O(1), and it calls for the embedded function "nodes" which has O(n) (because it takes a tree and generates a list of nodes). The total complexity of the function checkTree assuming input is a balanced tree is therefore: (O(n) * O(1)) + (O(1) * O(n)) = O(n) + O(n) = 2 O(n) = O(n).

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___

FUNCTION:

isSorted :: Ord a => [a] -> Bool
isSorted [] = True
isSorted [_] = True
isSorted (x:y:xs) = x < y && isSorted (y:xs)

COMPLEXITY:

Worst case scenario would be a completely sorted list, resulting in full iteration -> O(n). (n = lenght  of list).

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___

FUNCTION:

leftChildOK :: Ord a => AATree a -> Bool
leftChildOK Empty = True
leftChildOK n = heightDiff == 1
  where
    heightDiff = height n - height (leftSub n)

COMPLEXITY:

O(1)

The function 'heightDiff' checks the height (O(1), only returns the current level) of the tree n - the height of (leftSub, which is (O(1)).


___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___

FUNCTION:

rightChildOK :: Ord a => AATree a -> Bool
rightChildOK Empty = True
rightChildOK n = heightDiff == 0 || heightDiff == 1
  where
    heightDiff = height n - height (rightSub n)


COMPLEXITY:

O(1) 

Same as above.


___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___


FUNCTION:

rightGrandChildOK :: Ord a => AATree a -> Bool
rightGrandChildOK Empty = True
rightGrandChildOK n = heightDiff == 1 && heightDiff' == 0 || heightDiff' == 1
  where
    heightDiff' = height n - height (rightSub n)
    heightDiff = height n - height (rightSub (rightSub n))


COMPLEXITY:

O(1)

Same as above. The function doesnt have to iterate the tree, only takes the difference between two heights. It does it twice, however: 2(O(1)) = O(1).




___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___


FUNCTION:

checkLevels :: Ord a => AATree a -> Bool
checkLevels node = leftChildOK node && rightChildOK node && rightGrandChildOK node

COMPLEXITY:

O(1) + O(1) + O(1) = O(1).

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___


FUNCTION:

isEmpty :: AATree a -> Bool
isEmpty Empty = True
isEmpty _ = False

COMPLEXITY:

Returns false for any amount of elements in the tree, no need to iterate, only checks first node. O(1).

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___


FUNCTION:

leftSub :: AATree a -> AATree a
leftSub Empty = Empty
leftSub (Node _ left _ _) = left

COMPLEXITY:

Returns the left value in the tree. O(1).

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___


FUNCTION:

rightSub :: AATree a -> AATree a
rightSub Empty = Empty
rightSub (Node _ _ _ right) = right

COMPLEXITY:

Returns the right value in the tree. O(1).

___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___   ___


_________________________________________________________________________________

				     ::::::MODULE MAIN::::::
_________________________________________________________________________________


FUNCTION:

main :: IO ()
main = do
  contents <- getContents

  let list = words contents

  let tree = foldl (flip insert) emptyTree list


  let s = size tree
  let h = bstHeight tree
  let c = checkTree tree
  let oh = ceiling (logBase 2 (fromIntegral (s + 1))) - 1
  let r = fromIntegral h / fromIntegral oh
  let fw = take 20 (inorder tree)


  putStrLn $ unlines
              [ "Size: " ++ show s
              , "Height: " ++ show h
              , "Optimal height: " ++ show oh
              , "Height / Optimal height: " ++ show r
              , "checkTree: " ++ show c
              , "First 20 words: " ++ show fw
              ]

COMPLEXITY:

"list" 	= O(n) (words iterate whole list).
"foldl"     = O(n) (insert = O(1) + list = O(n))
"size"      = O(n)
"bstHeight" = O(log n)
"checkTree" = O(n)
"oh"		= O(1)
"r"		= O(1)
"fw"		= O(1)

O(n) + O(log n) + O(n) + O(1) + O(1) + O(1) = 2(O(n)) + 3(O(1)) + O(log n) = Ignore constants -> O(n) + O(log n) + O(1) -> Worst case = O(n).












